{"name":"Subst","tagline":"Search and des... argh... replace in many files at once. Use regexp and power of Python to replace what you want.","body":"subst\r\n=====\r\n\r\n`subst` is simple utility to replace one string into another in given list of files.\r\n\r\nCurrent stable version\r\n----------------------\r\n\r\n0.3\r\n\r\nBut why?\r\n--------\r\n\r\n1. There is `sed` for example?\r\n\r\n    Yes, it is. But `sed` use regexps engine called \"Basic Regular Expressions\", or \"Extended\r\n    Regular Expression\". PCRE is much more widely used dialect.\r\n\r\n2. So I can use Perl!\r\n\r\n    Of course you can. But not everyone know how to use Perl. I know, but `subst` is IMHO\r\n    simpler to use.\r\n\r\nOK, so how to use it?\r\n---------------------\r\n\r\nSimple\r\n------\r\n\r\n    echo 'Hello World!' | subst -s 's/Hello/Hi/' -\r\n\r\nor:\r\n\r\n    subst -p '(192\\.168)\\.1\\.(10)' -r '\\1.0.\\2' /etc/hosts\r\n\r\nMore\r\n----\r\n\r\nEverything is in help :) Just execute:\r\n\r\n    subst --help\r\n\r\nLook at result:\r\n\r\n    % subst --help\r\n    usage: subst.py [-h] [-p PATTERN] [-r REPLACE] [--eval-replace] [-t STRING]\r\n                    [-s \"s/PAT/REP/gixsm\"] [-c COUNT] [-l] [-i]\r\n                    [--pattern-dot-all] [--pattern-verbose] [--pattern-multiline]\r\n                    [--utf8] [--encoding-input ENCODING_INPUT]\r\n                    [--encoding-file ENCODING_FILE]\r\n                    [--encoding-filesystem ENCODING_FILESYSTEM] [-b] [-e EXT]\r\n                    [--stdin] [--stdout] [--verbose] [--debug] [-v]\r\n                    [files [files ...]]\r\n    \r\n    Replace PATTERN with REPLACE in many files.\r\n    \r\n    positional arguments:\r\n      files                 file to parse.\r\n    \r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -p PATTERN, --pattern PATTERN\r\n                            pattern to replace for. Supersede\r\n                            --pattern_and_replace. Required if --replace is\r\n                            specified.\r\n      -r REPLACE, --replace REPLACE\r\n                            replacement. Supersede --pattern_and_replace. Required\r\n                            if --pattern is specified.\r\n      --eval-replace        if specified, make eval data from --replace(should be\r\n                            valid Python code). Ignored with --pattern_and_replace\r\n                            argument.\r\n      -t STRING, --string STRING\r\n                            if specified, treats --pattern as string, not as\r\n                            regular expression. Ignored with --pattern_and_replace\r\n                            argument.\r\n      -s \"s/PAT/REP/gixsm\", --pattern-and-replace \"s/PAT/REP/gixsm\", --pattern_and_replace \"s/PAT/REP/gixsm\"\r\n                            pattern and replacement in one:\r\n                            s/pattern/replace/g(pattern is always regular\r\n                            expression, /g is optional and stands for --count=0,\r\n                            /i == --ignore-case, /s == --pattern-dot-all, /m ==\r\n                            --pattern-multiline).\r\n      -c COUNT, --count COUNT\r\n                            make COUNT replacements for every file (0 makes\r\n                            unlimited changes, default).\r\n      -l, --linear          apply pattern for every line separately. Without this\r\n                            flag whole file is read into memory.\r\n      -i, --ignore-case     ignore case of characters when matching\r\n      --pattern-dot-all     with this flag, dot(.) character in pattern match also\r\n                            new line character (see:\r\n                            http://docs.python.org/2/library/re.html#re.DOTALL).\r\n      --pattern-verbose     with this flag pattern can be passed as verbose(see:\r\n                            http://docs.python.org/2/library/re.html#re.VERBOSE).\r\n      --pattern-multiline   with this flag pattern can be passed as multiline(see:\r\n                            http://docs.python.org/2/library/re.html#re.MULTILINE)\r\n                            .\r\n      --utf8, -u            Use UTF-8 in --encoding-input, --encoding-file and\r\n                            --encoding-filesystem\r\n      --encoding-input ENCODING_INPUT\r\n                            set encoding for parameters like --pattern etc\r\n                            (default for your system: ascii)\r\n      --encoding-file ENCODING_FILE\r\n                            set encoding for content of processed files (default\r\n                            for your system: ascii)\r\n      --encoding-filesystem ENCODING_FILESYSTEM\r\n                            set encoding for paths and filenames (default for your\r\n                            system: utf-8)\r\n      -b, --no-backup       disable creating backup of modified files.\r\n      -e EXT, --backup-extension EXT\r\n                            extension for backup files(ignore if no backup is\r\n                            created), without leading dot. Defaults to: \"bak\".\r\n      --stdin               read data from STDIN(implies --stdout)\r\n      --stdout              output data to STDOUT instead of change files in-\r\n                            place(implies --no-backup)\r\n      --verbose             show files and how many replacements was done\r\n      --debug               show more informations\r\n      -v, --version         show version and exit\r\n    \r\n    Miscellaneous notes:\r\n    * regular expressions engine used here is PCRE, dialect from Python\r\n    * is required to pass either --pattern and -replace, or\r\n      --pattern_and_replace argument\r\n    * if pattern passed to --pattern_and_replace has /g modifier, it\r\n      overwrites --count value\r\n    * if neither /g modifier nor --count argument is passed, assume that\r\n      --count is equal 1\r\n    * if only --count is given, this value is used\r\n    * if --eval-replace is given, --replace must be valid Python code, where\r\n      can be used m variable.m holds MatchObject instance (see:\r\n      http://http://docs.python.org/2/library/re.html#match-objects, for\r\n      example:\r\n        --eval-replace --replace 'm.group(1).lower()'\r\n    * regular expressions with non linear search read whole file to yours\r\n      computer memory - if file size is bigger then you have memory in your\r\n      computer, it fails\r\n    * parsing expression passed to --pattern_and_replace argument is very\r\n      simple - if you use / as delimiter, then in your expression can't be\r\n      used this character anymore. If you need to use same character as\r\n      delimiter and in expression, then better use --pattern and --replace\r\n      argument\r\n    \r\n    Security notes:\r\n    * be carefull with --eval-replace argument. When it's given, value\r\n      passed to --replace is eval-ed, so any not safe code will be executed!\r\n    \r\n    Author:\r\n    Marcin Sztolcman <marcin@urzenia.net> // http://urzenia.net\r\n    \r\n    HomePage:\r\n    http://mysz.github.io/subst/\r\n\r\nSome examples?\r\n--------------\r\n\r\nSimple replace word 'Hello' with 'Hi' in data read from STDIN:\r\n\r\n    echo 'Hello World!' | subst -s 's/Hello/Hi/' -\r\n\r\nReplace every IP address in form: 192.168.1.X (where X is few digits - single octet)\r\nwith 192.168.0.X in `/etc/hosts`:\r\n\r\n    subst -p '(192\\.168)\\.1\\.(10)' -r '\\1.0.\\2' /etc/hosts\r\n\r\nInstallation\r\n------------\r\n\r\n`subst` should work on any platform where [Python](http://python.org) is available, it means Linux, Windows, MacOS X etc. There is no dependencies, plain Python power :)\r\n\r\nTo install, go to [GitHub releases](https://github.com/mysz/subst/releases), download newest release, unpack and put somewhere in `PATH` (ie. `~/bin` or `/usr/local/bin`).\r\n\r\nIf You want to install newest unstable version, then just copy file to your PATH, for example:\r\n\r\n    curl https://raw.github.com/mysz/subst/master/subst.py > /usr/local/bin/subst\r\n\r\nor:\r\n\r\n    wget https://raw.github.com/mysz/subst/master/subst.py -O /usr/local/bin/subst\r\n\r\nVoila!\r\n\r\nAuthors\r\n-------\r\n\r\nMarcin Sztolcman <marcin@urzenia.net>\r\n\r\nContact\r\n-------\r\n\r\nIf you like or dislike this software, please do not hesitate to tell me about this me via email (marcin@urzenia.net).\r\n\r\nIf you find bug or have an idea to enhance this tool, please use GitHub's [issues](https://github.com/mysz/subst/issues).\r\n\r\nLicense\r\n-------\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Marcin Sztolcman\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nChangeLog\r\n---------\r\n\r\n### v0.3\r\n* better handling of non-ascii encoding in files, patterns etc\r\n* higher priority for --pattern-* switches then modifiers in --pattern-and-replace\r\n* unified switches syntax (was --pattern_and_replace, but other switches used dashes)\r\n* pep8\r\n* typos and editorials\r\n\r\n### v0.2\r\n* second public version\r\n","google":"UA-207617-22","note":"Don't delete this file! It's used internally to help with page regeneration."}